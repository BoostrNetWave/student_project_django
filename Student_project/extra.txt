                {% comment %} <div class="collapse navbar-collapse" id="navbarText">
                    <ul class="navbar-nav ms-auto mb-2 mb-lg-0 mt-4 mt-lg-0">
                        <li class="nav-item"><a class="nav-link" href="{% url "studentpost" %}">Posts</a></li>
                        <li class="nav-item"><a class="nav-link" href="{% url "services" %}">Services</a></li>
                        <li class="nav-item"><a class="nav-link" href="{% url "talents" %}">Talents</a></li>
                        <li class="nav-item"><a class="nav-link" href="{% url "contactus" %}">Contact Us</a></li>
                        <li class="nav-item dropdown">
                          <a class="nav-link" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fa-solid fa-user"></i>
                          </a>
                          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                              <li><a class="dropdown-item" href="{% url "profiles" %}">Profile</a></li>
                              <li><a class="dropdown-item" href="{% url "settings" %}">Setting</a></li>
                              <li><a class="dropdown-item" href="{% url "messages" %}">Message</a></li>
                              <li><hr class="dropdown-divider"></li>
                              <li><a class="dropdown-item" href="href="{% url 'logout' %}"">Logout</a></li>
                          </ul>
                        </li>
                    </ul>
                    <ul class="navbar-nav flex-row mb-2 mb-lg-0 ms-lg-3">
                        <li class="nav-item me-2">
                            <a href="{% url 'signup' %}"><button class="px-3"> <span>Sign Up</span></button></a>
                        </li>
                        <li class="nav-item" >
                            <a href="{% url 'login' %}"><button class="px-3"> <span>Log In</span></button></a>
                        </li>
                    </ul>
                </div> {% endcomment %}


from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from signUp.models import CustomUser, CandidateProfile, RecruiterProfile

@login_required
def profiles_View(request):
    if request.user.is_authenticated:
        user = request.user
        context = {'user': user}

        if user.role == CustomUser.CANDIDATE:
            try:
                candidate_profile = CandidateProfile.objects.get(user=user)
                context['profile'] = candidate_profile
                context['role'] = 'candidate'
                print(context)
            except CandidateProfile.DoesNotExist:
                context['error_message'] = 'No CandidateProfile found for your account.'
                
        elif user.role == CustomUser.RECRUITER:
            try:
                recruiter_profile = RecruiterProfile.objects.get(user=user)
                context['profile'] = recruiter_profile
                context['role'] = 'recruiter'
                print(context)
            except RecruiterProfile.DoesNotExist:
                context['error_message'] = 'No RecruiterProfile found for your account.'
        else:
            context['error_message'] = 'Invalid user role.'

        return render(request, 'profiles/profiles.html', context)
    else:
        return redirect('login')


from django.shortcuts import render, redirect
from .forms import ProjectExperienceForm

def add_project(request):
    try:
        project_user = get_object_or_404(ProjectExperience, user=request.user)
    except UserProfile.DoesNotExist:
        project_user = ProjectExperience(user=request.user)
    if request.method == 'POST':
        P_form = ProjectExperienceForm(request.POST ,instance=project_user)
        if P_form.is_valid():
            # Save the form data to the database
            P_form.save()
            # Redirect to a success page or display a success message
            messages.success(request, 'Profile updated successfully.')
            return redirect('profiles')  # Replace 'profile' with the name of the URL pattern for the profile page
        else:
            messages.error(request, 'Error updating profile. Please check the form and try again.')
            # Redirect to the profile page after successful form submission
    else:
        form = ProjectExperienceForm()
    return render(request, 'profiles/project_experience.html', {'form': form})


@login_required
def settings_View(request):
    user_profile = get_object_or_404(UserProfile, user=request.user)
    user = request.user

    if user.role == CustomUser.RECRUITER:
        profile = get_object_or_404(RecruiterProfile, user=user)
    else:
        profile = get_object_or_404(CandidateProfile, user=user)

    user_profile_form = UserProfileForm(instance=user_profile)
    project_experience_form = ProjectExperienceForm()
    
    context = {
        'user_profile_form': user_profile_form,
        'project_experience_form': project_experience_form,
        'user_profile': user_profile,
        'custom_user': user,
        'profile': profile,
    }
    
    return render(request, 'profiles/settings.html', context)


@login_required
def update_personal_info(request):
    if request.method == 'POST':
        user = request.user
        user_profile_form = UserProfileForm(request.POST, instance=user.userprofile)
        if user_profile_form.is_valid():
            user_profile_form.save()
            # Update additional fields based on user role
            if user.role == CustomUser.RECRUITER:
                recruiter_profile = get_object_or_404(RecruiterProfile, user=user)
                recruiter_profile.company = request.POST.get('company')
                recruiter_profile.save()
            else:
                candidate_profile = get_object_or_404(CandidateProfile, user=user)
                # Additional fields for candidate profile can be updated here if needed

            messages.success(request, 'Your personal information has been updated successfully.')
            return redirect('settings')
        else:
            messages.error(request, 'Form validation error. Please check the entered data.')
            # Optionally, you can pass the form errors to the template for display
            return render(request, 'profiles/settings.html', {'user_profile_form': user_profile_form})
    else:
        messages.error(request, 'Invalid request method.')
        return redirect('settings')


@login_required
def settings_View(request):
    if request.user.is_authenticated:
        user = request.user
        if user.role == CustomUser.RECRUITER:
            profile = get_object_or_404(RecruiterProfile, user=user)
        else:
            profile = get_object_or_404(CandidateProfile, user=user)

    return render(request, 'profiles/settings.html')    